name: Continuous integration

on:
  pull_request:
    branches:
      - main

jobs:
  check-changes:
    name: Check changes
    runs-on: ubuntu-latest
    outputs:
      ansible: ${{ steps.changes.outputs.ansible }}
      shell: ${{ steps.changes.outputs.shell }}
      shell_files: ${{ join(fromJSON(steps.changes.outputs.shell_files), ' ') }}
      packer: ${{ steps.changes.outputs.packer }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Check changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          list-files: json
          filters: |
            ansible:
              - 'ansible/**'
            shell:
              - '*.sh'
              - '**/*.sh'
            packer:
              - '*.pkr.hcl'
              - 'http/**'

  ansible-lint:
    name: Lint ansible
    needs: check-changes
    runs-on: ubuntu-latest
    if: ${{ needs.check-changes.outputs.ansible == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run ansible-lint
        uses: ansible/ansible-lint@v24
        with:
          args: ansible

  shellcheck:
    name: Shellcheck
    needs: check-changes
    runs-on: ubuntu-latest
    if: ${{ needs.check-changes.outputs.shell == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run shellcheck
        uses: ./.github/actions/shellcheck
        with:
          scripts: ${{ needs.check-changes.outputs.shell_files }}

  check-packer-changes:
    name: Check packer changes
    needs: check-changes
    runs-on: ubuntu-latest
    if: ${{ needs.check-changes.outputs.ansible == 'true' || needs.check-changes.outputs.packer == 'true' }}
    outputs:
      variants: ${{ steps.changes.outputs.changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Check changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            base: &base
              - '*.pkr.hcl'
              - 'http/**'
              - ansible/roles/apt
              - ansible/roles/base
              - ansible/roles/chrony
              - ansible/roles/cloud_init
              - ansible/roles/networking
              - ansible/roles/sysprep
              - ansible/base.yml
              - ansible/sysprep.yml
            router:
              - *base
              - ansible/roles/router
              - ansible/router.yml
            nameserver:
              - *base
              - ansible/roles/nameserver
              - ansible/nameserver.yml

  packer-validate:
    name: Validate packer template
    needs: check-packer-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: ${{ fromJSON(needs.check-packer-changes.outputs.variants) }}
        exclude:
          - variant: base
    env:
      PACKER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup packer
        uses: ./.github/actions/setup-packer
      - name: Initialize packer
        run: make init
      - name: Generate ssh key
        run: make gen-ssh-key
      - name: Validate packer template
        run: make validate VARIANT=${{ matrix.variant }}

  packer-build:
    name: Build packer template
    needs: ["ansible-lint", "shellcheck", "check-packer-changes","packer-validate"]
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.packer-validate.result != 'skipped'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: ${{ fromJSON(needs.check-packer-changes.outputs.variants) }}
        exclude:
          - variant: base
    env:
      PACKER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PKR_VAR_cpus: 2
      PKR_VAR_memory: 4096
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup packer
        uses: ./.github/actions/setup-packer
      - name: Setup kvm
        uses: ./.github/actions/setup-kvm
      - name: Setup ansible
        uses: ./.github/actions/setup-ansible
      - name: Initialize packer
        run: make init
      - name: Generate ssh key
        run: make gen-ssh-key
      - name: Build packer template
        run: make build VARIANT=${{ matrix.variant }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.variant }}-${{ github.sha }}
          retention-days: 1
          path: |
            images/*
            !images/efivars.fd

  trivy-scan:
    name: Scan packer build artifacts
    needs: ["check-packer-changes", "packer-build"]
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.packer-build.result != 'skipped'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: ${{ fromJSON(needs.check-packer-changes.outputs.variants) }}
        exclude:
          - variant: base
    steps:
      - name: Setup qemu-utils
        run: sudo apt-get update && sudo apt-get install -y qemu-utils
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.variant }}-${{ github.sha }}
          path: artifacts
      - name: Convert qcow2 image to raw format
        run: |
          mkdir raw-artifacts
          artifact=$(ls artifacts/*.qcow2)
          qemu-img convert -f qcow2 -O raw $artifact raw-artifacts/$(basename $artifact | sed 's/\.qcow2$/.raw/')
      - name: Mount raw image
        run: |
          artifact=$(ls raw-artifacts/*.raw)
          loopdev=$(sudo losetup -f)
          sudo losetup -P ${loopdev} $artifact
          mkdir rootfs
          sudo mount ${loopdev}p4 rootfs
          sudo mount ${loopdev}p3 rootfs/boot
          sudo mount ${loopdev}p2 rootfs/boot/efi
      - name: Run trivy scan on rootfs
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: rootfs
          scan-ref: rootfs
          ignore-unfixed: true
          format: sarif
          output: ${{ matrix.variant }}.sarif
      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ matrix.variant }}.sarif
          category: ${{ matrix.variant }}

  check-results:
    name: Check results
    needs: ["check-packer-changes","packer-validate","packer-build","trivy-scan"]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Result failure
        if: |
            contains(needs.*.result, 'failure') ||
            contains(needs.*.result, 'cancelled')
        run: exit 1
      - name: Result succesful
        run: exit 0
